#pragma once
#include "lib/cexpr/array.h"
using namespace cexpr;
using cexpr::valuelist::ValueList;

template<typename rows>
struct Grid;

template<bool _drawn, int _value>
struct Cell {
    constexpr static bool drawn = _drawn;
    constexpr static int value = _value;
};

template<typename cell>
using draw = Cell<true, cell::value>;

// Indexed from the top left
template<int x, int y, typename grid>
struct draw_cell;

template<int x, int y, typename rows>
struct draw_cell<x, y, Grid<rows>> {
    using row = cexpr::list::nth_t<y, rows>;
    using type = Grid<cexpr::list::set_nth_t<y,
          cexpr::list::set_nth_t<
              x, draw<cexpr::list::nth_t<x, row>>, row>,
          rows>>;
};

template<int x, int y, typename grid>
using draw_cell_t = typename draw_cell<x, y, grid>::type;

template<typename cell>
struct is_drawn {
    using type = std::integral_constant<bool, cell::drawn>;
};

/**
 * check_rows
 */
template<typename row>
struct check_row {
    using type = cexpr::list::all_t<is_drawn, row>;
};

template<typename grid>
struct check_rows;

template<typename rows>
struct check_rows<Grid<rows>> {
    using type = typename cexpr::list::any_t<
        check_row,
        rows>;
};

template<typename grid>
using check_rows_t = typename check_rows<grid>::type;


template<typename grid>
struct check_columns;

template<typename lst>
using take_one = cexpr::list::take<1, lst>;

template<int n, typename grid>
struct nth_column;

template<int n, typename rows>
struct nth_column<n, Grid<rows>> {
    template<typename lst>
    using take_n = cexpr::list::take<n, lst>;
    using type = 
        cexpr::list::fmap_t<
            cexpr::list::head,
            cexpr::list::fmap_t<take_n, rows>>;
};

template<int n>
struct check_type;

template<typename grid>
struct check_columns {
    using first_col = typename nth_column<1, grid>::type;
};

template<typename grid>
struct has_bingo {
    constexpr static bool value = false;
};



template<typename lines>
struct parse_grid;

template<int value>
struct new_cell {
    using type = Cell<false, value>;
};

template<typename str>
using to_base_ten = cexpr::valuelist::to_int<10, str>;

template<typename str>
struct parse_line {
    using type =
        cexpr::valuelist::fmap_to_list_t<
            new_cell,
            cexpr::valuelist::fmap_to_value_t<
                to_base_ten,
                cexpr::valuelist::split_t<' ', str>>>;
};

template<typename lines>
struct parse_grid {
    using type = Grid<cexpr::list::fmap_t<parse_line, lines>>;
};

template<typename lines>
struct read_boards {
    using type = list::prepend_t<
        typename parse_grid<list::take_t<5, lines>>::type,
        typename read_boards<list::drop_t<5, lines>>::type
    >;
};

template<>
struct read_boards<List<>> {
    using type = List<>;
};

template<int size, const char (&arr)[size]>
struct parse_input {
    using lines = typename cexpr::array::readlines<size, arr>::type;
    using draws = list::take_t<1, lines>;
    using boards = typename read_boards<list::drop_t<1, lines>>::type;

};

template<int size, const char (&arr)[size]>
struct solution {

    using parsed_input = parse_input<size, arr>;

    constexpr static int answer = 0;
};

template<int size, const char (&arr)[size]>
struct solution_pt2 {
    constexpr static int answer = 0;
};
